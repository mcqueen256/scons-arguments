<!DOCTYPE article PUBLIC "-//OASIS//DTD DocBook XML 5.0//EN" "http://docbook.org/xml/5.0/dtd/docbook.dtd">
<article xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" version="5.0">
	<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons-arguments</title>
	<subtitle xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">User&apos;s 
	Manual</subtitle>
	<info xmlns="http://docbook.org/ns/docbook">
		<author xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<personname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Pawe≈Ç 
			Tomulik</personname>
			<email xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@meil.pw.edu.pl</email>
		</author>
		<pubdate xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">2015-11-07</pubdate>
	</info>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-intro" version="5.0">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Introduction</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		<package xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons-arguments</package> 
		package is an extension to 
		<productname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://scons.org">SCons</link></productname> 
		which adds more flexibility when customizing command-line options and 
		variables in SCons. It&apos;s based on existing SCons functionality 
		(command line variables and options) but is targeted towards 
		compacting the notation when defining multiple command-line 
		variables/options. It also provides a way to define 
		mutually-dependent arguments, where the (default) value of one 
		command-line argument may refer other arguments. Finally, it allows 
		to import modules containing argument declarations in a way similar 
		to SCons tools. This way, SCons tools may be accompanied by 
		tool-related command-line arguments (e.g. 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">CFLAGS</varname> 
		and so for the 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">cc</code> 
		tool).</para>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-args-basics">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Arguments 
		basics</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Arguments 
		are &quot;special variables&quot;. In general, an Argument is an 
		object which associates up to three endpoints:</para>
		<itemizedlist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">a 
				SCons 
				<emphasis xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">construction 
				variable</emphasis> ( 
				<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env[&apos;var&apos;] 
				= val</code> ),</para>
			</listitem>
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">a 
				SCons 
				<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables">command 
				line variable</link> ( 
				<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons 
				var=val</code> ), and</para>
			</listitem>
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">a 
				SCons 
				<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options">command 
				line option</link> ( 
				<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons 
				--opt val</code> ).</para>
			</listitem>
		</itemizedlist>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
		addition, values from the operating system environment may be easily 
		incorporated into Arguments.</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">With 
		Arguments, we maintain abstract variables whose values are settable 
		via scons command line and are passed to scons environment without 
		much developer&apos;s effort. Command line variables or options act 
		as inputs for Arguments whereas construction variables are their 
		destination points.</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			Arguments are implemented in 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">SConsArguments</code>
			 submodule:
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">import SConsArguments</programlisting>
			Their usage is basically a three step procedure:
		</para>
		<orderedlist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declare 
				Arguments, this yields a container of Argument Declarations see 
				<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sec-declaring-args"/> 
				.</para>
			</listitem>
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Commit 
				Argument Declarations to create actual Argument objects, see 
				<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sec-committing-args"/> 
				.</para>
			</listitem>
			<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Postprocess 
				Arguments to update SCons environment, see 
				<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sec-postprocessing-args"/> 
				.</para>
			</listitem>
		</orderedlist>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">You 
		may further access (read and modify) the values of Arguments in your 
		SCons environment via so-called proxy objects. In the following 
		subsections we will explain all these steps and techniques.</para>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-declaring-args">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaring 
		Arguments</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		first step of the procedure outlined in previous subsection is to 
		declare Arguments. The goal is to prepare the whole collection of 
		Argument Declarations for further processing. Four factory methods 
		are provided for this purpose. The first two named 
		<function xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</function> 
		and 
		<function xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArgument</function> 
		create an object representing a single Argument Declaration. The 
		other two named 
		<function xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclarations</function> 
		and 
		<function xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArguments</function> 
		create multiple declarations at once returning dict-like collection 
		where Argument Names are mapped onto Argument Declarations. The 
		dictionary contains multiple Argument Declarations. In steps 2. and 
		3. of the previously outlined procedure we will actually need this 
		dict object.</para>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-declaring-single-arg">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaring 
			single Argument</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
			most scenarios you&apos;ll declare multiple arguments at once. This 
			section is provided only to document in details the parameters used 
			to declare single argument, because same parameters will appear in 
			the plural declarations described in other sections.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Single 
			Argument declaration may be created with either 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			or 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArgument</methodname> 
			. The prototype of 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			is</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclaration ArgumentDeclaration([env_decl[, var_decl[, opt_decl]]])</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				The function creates Argument Declaration according to three 
				parameters: 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_decl</parameter>
				 , 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_decl</parameter>
				 , and 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter>
				 . All the parameters are optional and if you wish to skip any of 
				them, just set it to 
				<constant xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</constant>
				 :
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">decl = ArgumentDeclaration(env_decl, None, opt_decl)</programlisting>
				or use only relevant named parameters:
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">decl = ArgumentDeclaration(env_decl = env_decl, opt_decl = opt_decl)</programlisting>
			</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example-declaring-single-arg">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaring 
				single Argument</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Let&apos;s 
				create a string-valued variable which obtains it&apos;s value from 
				option 
				<option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--xvar</option> 
				and stores in construction variable named 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">xvar</varname> 
				:</para>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclaration
decl = ArgumentDeclaration( {&apos;xvar&apos; : None}, None, (&apos;--xvar&apos;, {&apos;dest&apos; : &apos;xvar&apos;, &apos;type&apos; : &apos;string&apos;}) )</programlisting>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
				above code creates a new Argument Declaration which associates 
				scons environment variable named 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">xvar</varname> 
				with a CLI option 
				<option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--xvar</option> 
				. The default value for environment variable is 
				<constant xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</constant> 
				(it&apos;s indicated by 
				<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">{&apos;xvar&apos; 
				: None}</code> in the above snippet). The command line variable is 
				skipped, i.e. we do not associate our Argument with command-line 
				variable. The command line option is named 
				<option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--xvar</option> 
				and holds its value in an internal attribute named 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">xvar</varname> 
				(the 
				<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">{&apos;dest&apos; 
				: &apos;xvar&apos;}</code> item). The option&apos;s type is 
				<type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">string</type> 
				.</para>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			parameters to 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			are summarized in the following table:</para>
			<informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<tr xmlns="http://docbook.org/ns/docbook">
						<th xmlns="http://docbook.org/ns/docbook">name</th>
						<th xmlns="http://docbook.org/ns/docbook">type</th>
						<th xmlns="http://docbook.org/ns/docbook">description</th>
					</tr>
				</thead>
				<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_decl</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">tuple</type> 
						or 
						<type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">dict</type></td>
						<td xmlns="http://docbook.org/ns/docbook">
							<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">A 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">(name, 
							default)</code> tuple or one-entry dict 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">{name 
							: default}</code> . This data is used to initialize associated 
							construction variable at later stage. The variable will be 
							initialized with 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env.SetDefault(name 
							= default)</code> , where 
							<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</varname> 
							is the destination scons environment.</para>
						</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_decl</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">tuple</type> 
						or 
						<type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">dict</type></td>
						<td xmlns="http://docbook.org/ns/docbook">
							<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaration 
							parameters used when adding the corresponding command-line 
							variable. If 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_decl</parameter> 
							is a tuple, it must have the form: ( key [, help, default, 
							validator, converter, kw ] ), where entries in square brackets 
							are optional. The consecutive elements are interpreted in order 
							shown above as 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">key</parameter> 
							, 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">help</parameter> 
							, 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter> 
							, 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">validator</parameter> 
							, 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">converter</parameter> 
							, 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">kw</parameter> 
							. The meaning of these arguments is same as for 
							<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html#Add">SCons.Variables.Variables.Add()</link> 
							. The 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">kw</parameter> 
							, if present, must be a dictionary.</para>
							<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_decl</parameter> 
							is a dictionary it should have the form 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">{ 
							&apos;key&apos; : &apos;foo&apos;, &apos;help&apos; : &apos;Help 
							for foo&apos;, ... }</code> . The 
							<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;kw&apos;</literal> 
							, if present, must be a dictionary. The arguments enclosed in 
							the dictionary are later passed verbatim to 
							<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html#Add">SCons.Variables.Variables.Add()</link> 
							as keyword arguments.</para>
						</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">tuple</type> 
						, 
						<type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">list</type> 
						or 
						<type xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">dict</type></td>
						<td xmlns="http://docbook.org/ns/docbook">
							<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaration 
							parameters used when adding the associated 
							<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options">SCons 
							command-line option</link> . If 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter> 
							is a tuple or list, it must have the form: 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">(names, 
							args)</code> or 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">[names, 
							args]</code> where 
							<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">names</varname> 
							is a string or tuple of option names (e.g. 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&quot;-f 
							--file&quot;</code> or 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">(&apos;-f&apos;, 
							&apos;--file&apos;)</code> ) and 
							<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args</varname> 
							is a dictionary defining the remaining 
							<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">option 
							attributes</link> . The entire 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter> 
							may be for example 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">tuple( 
							(&apos;-f&apos;,&apos;--file-name&apos;), { &apos;action&apos; : 
							&quot;store&quot;, &apos;dest&apos; : &quot;file_name&quot; } 
							)</code> .</para>
							<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter> 
							is a dictionary, it should have following form (keys are 
							relevant, values are just examples): 
							<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">{ 
							&apos;names&apos; : (&quot;-f&quot;, &quot;--file-name&quot;), 
							&apos;action&apos; : &apos;store&apos;, &apos;type&apos; : 
							&apos;string&apos;, &apos;dest&apos; : &apos;file_name&apos;, 
							... }</code> . The parameters enclosed in 
							<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_decl</parameter> 
							dictionary are passed verbatim to 
							<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Script.Main-module.html#AddOption">SCons.Script.Main.AddOption()</link> 
							. Note, that the 
							<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">dest</literal> 
							parameter is required.</para>
						</td>
					</tr>
				</tbody>
			</informaltable>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Sometimes, 
			when using 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			we have to repeat some data. For example, default values for 
			construction variable and command line variable are usually same. 
			The same applies to 
			<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">help</parameter> 
			strings which in most cases are identical for both, the command line 
			variable and option. Because we use different parametrs to describe 
			command line variable and environment variable we have to type the 
			default value or help string twice. To avoid such a code duplication 
			one may use functions with a &quot;unified&quot; interface, in this 
			case the 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArgument</methodname> 
			function.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArgument</methodname> 
			has the following prototype</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclaration DeclareArgument(env_key = None, var_key = None, opt_key = None,
      default = None, help = None, validator = None, converter = None, option = None,
      type = None, opt_default = None, metavar = None, nargs = None, choices = None,
      action = None, const = None, callback = None, callback_args = None,
      callback_kwargs = None)
  </programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Each 
			of its parameters is mapped to an appropriate parameters in 
			associated variables. If we denote by ENV the corresponding 
			construction variable, by VAR the corresponding command line 
			variable, and by OPT the corresponding command line option, then all 
			the above parameters are mapped to their counterparts in ENV, VAR 
			and OPT as shown in the following table</para>
			<informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<tr xmlns="http://docbook.org/ns/docbook">
						<th xmlns="http://docbook.org/ns/docbook">ARG</th>
						<th xmlns="http://docbook.org/ns/docbook">ENV</th>
						<th xmlns="http://docbook.org/ns/docbook">VAR</th>
						<th xmlns="http://docbook.org/ns/docbook">OPT</th>
						<th xmlns="http://docbook.org/ns/docbook">Description</th>
					</tr>
				</thead>
				<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_key</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">key</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">Key used to identify 
						corresponding construction variable (ENV). If 
						<constant xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</constant> 
						the Argument is not associated with construction variable.</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_key</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">key</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">Key used to identify 
						corresponding command-line variable (VAR). If 
						<constant xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</constant> 
						, the Argument is not associated with command line variable.</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_key</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">dest</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Key used to identify 
						corresponding command-line option (OPT). If 
						<constant xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</constant> 
						the Argument is not associated with command line option.</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">Default value used to 
						initialize corresponding construction variable (ENV) and 
						command-line variable (VAR). Note that there is separate 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_default</parameter> 
						parameter for command-line option.</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">help</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">help</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">help</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Message used to 
						initialize help for associated command-line variable (VAR) and 
						command-line option (OPT).</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">validator</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">validator</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">Same as for 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html#Add">SCons.Variables.Variables.Add()</link>.</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">converter</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">converter</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">Same as for 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html#Add">SCons.Variables.Variables.Add()</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">option</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">option strings</td>
						<td xmlns="http://docbook.org/ns/docbook">Option strings, e.g. 
						<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&quot;--option&quot;</code> 
						, 
						<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&quot;--option 
						-o&quot;</code> or 
						<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">tuple(&quot;--option&quot;, 
						&quot;-o&quot;)</code> .</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">type</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link> .</td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_default</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">default</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">metavar</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">metavar</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">metavar</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">nargs</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">nargs</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">nargs</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">choices</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">choices</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">choices</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">action</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">action</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">action</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">const</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">const</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">const</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_args</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_args</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_args</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://docs.python.org/2/library/optparse.html#option-attributes">optparse 
						option attributes</link></td>
					</tr>
					<tr xmlns="http://docbook.org/ns/docbook">
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_kwargs</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook">-</td>
						<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_kwargs</parameter></td>
						<td xmlns="http://docbook.org/ns/docbook">Same as 
						<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">callback_kwargs</parameter> 
						in 
						<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">optparse 
						option attributes</link></td>
					</tr>
				</tbody>
			</informaltable>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example-declaring-single-arg-with-gvardeclu">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaring 
				single Argument with DeclareArgument</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
				the following example, we declare same Argument as in 
				<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-declaring-single-arg"/> 
				, this time using 
				<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArgument</methodname> 
				:</para>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import DeclareArgument
decl = DeclareArgument(env_key = &apos;xvar&apos;, opt_key = &apos;xvar&apos;, option = &apos;--xvar&apos;, type = &apos;string&apos;)
  </programlisting>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">As 
				you may see, this notation is a little bit more compact than the 
				previous one.</para>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">To 
			this end we have created an object which represents single Argument 
			Declaration. We can&apos;t do with it much more than determine the 
			associated objects (ENV, VAR, OPT) and their properties. More useful 
			things can be done once we collect all our Arguments together. This 
			is the matter of next subsections.</para>
		</section>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-declaring-multiple-args">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Declaring 
			multiple Arguments</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			Argument workflow assumes that there is a point when all Argument 
			Declarations get collected together. At this point we have complete 
			information for the next step in the three-step procedure outlined 
			in 
			<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sec-args-basics"/> 
			. Having all Arguments in a single dictionary we may commit them to 
			create actual variables.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">There 
			is a special class named 
			<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclarations</classname> 
			which represents a collection of Argument Declarations. It&apos;s a 
			kind of dict, but it also adds few methods on its own. The 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">SConsArguments</code> 
			module provides two factory methods to create such collections, 
			these are 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclarations</methodname> 
			and 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArguments</methodname> 
			.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			function supports several forms of invocation. Here we give just a 
			couple of examples, the complete reference may be found in API 
			documentation.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example-using-gvardecls-with-a-dict-as-argument">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				ArgumentDeclarations with a dict of objects</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
				the following example we declare two Arguments:: 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
				and 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bar</varname> 
				.</para>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations, ArgumentDeclaration
# create single declarations
foodecl = ArgumentDeclaration( {&apos;ENV_FOO&apos; : &apos;default ENV_FOO&apos;},      # ENV
            (&apos;var_foo&apos;, &apos;var_foo help&apos;, ),                    # VAR
            (&apos;--foo&apos;, {&apos;dest&apos; : &quot;opt_foo&quot;}) )                 # OPT
bardecl = ArgumentDeclaration( {&apos;ENV_BAR&apos; : None},                   # ENV
            (&apos;var_bar&apos;, &apos;var_bar help&apos;, &apos;default var_bar&apos;),   # VAR
            (&apos;--bar&apos;, {&apos;dest&apos;:&quot;opt_bar&quot;, &quot;type&quot;:&quot;string&quot;}))   # OPT
# put them all together
decls = ArgumentDeclarations({ &apos;foo&apos; : foodecl, &apos;bar&apos; : bardecl })</programlisting>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
				keys in the above hash are Argument Names. Values are objects 
				representing Argument Declarations. Note, that in this example we 
				use different names for ENV, VAR and OPT. For example, the 
				construction variable (ENV) for Argument 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
				is named 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ENV_FOO</varname> 
				, the command line variable (VAR) is named 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var_foo</varname> 
				, and the option key is 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">opt_foo</varname> 
				.</para>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">You 
			don&apos;t have to create each Argument Declaration separatelly 
			before putting all your Arguments to a collection. Instead, you may 
			simply put declaration arguments as parameters to 
			ArgumentDeclarations and they will be passed to 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			for you. With this, the 
			<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-using-gvardecls-with-a-dict-as-argument"/> 
			may be refactored to the following form.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				ArgumentDeclarations with bare parameters</title>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations
# create multiple declarations at once
decls = ArgumentDeclarations({
# Argument &apos;foo&apos;
&apos;foo&apos; : ( {&apos;ENV_FOO&apos; : &apos;default ENV_FOO&apos;},                 # ENV
          (&apos;var_foo&apos;, &apos;var_foo help&apos;, ),                   # VAR
          (&apos;--foo&apos;, {&apos;dest&apos; : &quot;opt_foo&quot;}) ),               # OPT
# Argument &apos;bar&apos;
&apos;bar&apos; : ( {&apos;ENV_BAR&apos; : None},                              # ENV
          (&apos;var_bar&apos;, &apos;var_bar help&apos;, &apos;default var_bar&apos;),  # VAR
          (&apos;--bar&apos;, {&apos;dest&apos;:&quot;opt_bar&quot;, &quot;type&quot;:&quot;string&quot;}) ) # OPT
})</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">We 
			may also pass a list (instead of dict) as an argument to 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclarations</methodname> 
			, for example</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				ArgumentDeclarations with arrays</title>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations
decls = ArgumentDeclarations([
# Argument &apos;foo&apos;
(&apos;foo&apos;,  ( {&apos;ENV_FOO&apos; : &apos;default ENV_FOO&apos;},                  # ENV
           (&apos;var_foo&apos;, &apos;var_foo help&apos;, ),                    # VAR
           (&apos;--foo&apos;, {&apos;dest&apos; : &quot;opt_foo&quot;}) )),               # OPT
# Argument &apos;bar&apos;
(&apos;bar&apos;,  ( {&apos;ENV_BAR&apos; : None},                               # ENV
           (&apos;var_bar&apos;, &apos;var_bar help&apos;, &apos;default var_bar&apos;),   # VAR
           (&apos;--bar&apos;, {&apos;dest&apos;:&quot;opt_bar&quot;, &quot;type&quot;:&quot;string&quot;}) )) # OPT
])
</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			third &quot;cannonical&quot; form of invocation is to use keyword 
			arguments, that is our variables foo and bar may be declared as 
			follows</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example-using-gvardecls-with-keyword-arguments">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				ArgumentDeclarations with keyword arguments</title>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations
decls = ArgumentDeclarations(
# Argument &apos;foo&apos;
foo =  ( {&apos;ENV_FOO&apos; : &apos;default ENV_FOO&apos;},                  # ENV
         (&apos;var_foo&apos;, &apos;var_foo help&apos;, ),                    # VAR
         (&apos;--foo&apos;, {&apos;dest&apos; : &quot;opt_foo&quot;}) ),                # OPT
# Argument &apos;bar&apos;
bar =  ( {&apos;ENV_BAR&apos; : None},                               # ENV
         (&apos;var_bar&apos;, &apos;var_bar help&apos;, &apos;default var_bar&apos;),   # VAR
         (&apos;--bar&apos;, {&apos;dest&apos;:&quot;opt_bar&quot;, &quot;type&quot;:&quot;string&quot;}) )  # OPT
)</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Of 
			course the keyword arguments may be appended to normal arguments, so 
			the syntaxes of dict, list and keyword arguments may be mixed.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				ArgumentDeclarations with array and keyword arguments</title>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations
decls = ArgumentDeclarations(
 # Argument &apos;foo&apos;
 [(&apos;foo&apos;,(  {&apos;ENV_FOO&apos; : &apos;ENV default FOO&apos;},                    # ENV
            (&apos;FOO&apos;,         &apos;FOO variable help&apos;, ),             # VAR
            (&apos;--foo&apos;,       {&apos;dest&apos; : &quot;opt_foo&quot;})         ))],  # OPT
 # Argument &apos;geez&apos;
 geez  = (  {&apos;ENV_GEEZ&apos; : None},                                # ENV
            (&apos;GEEZ&apos;, &apos;GEEZ variable help&apos;, &apos;VAR default GEEZ&apos;), # VAR
            (&apos;--geez&apos;, {&apos;dest&apos;:&quot;opt_geez&quot;, &quot;type&quot;:&quot;string&quot;}))   # OPT
)</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Because 
			<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclarations</classname> 
			collection is a dict, it has this nice feature that we can remove, 
			add declarations or merge multiple 
			<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclarations</classname> 
			collections. That means, we don&apos;t have to declare all the 
			variables in a single call, but may spread out this task among 
			multiple SConscripts.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclarations</methodname> 
			inherits from 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclaration</methodname> 
			the feature that some data may have to be repeated. For those, who 
			want a more compact notation, we provide the 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArguments</methodname> 
			method which accepts the &quot;unified&quot; parameters.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Using 
				DeclareArguments</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
				this example we create variables foo and bar similar to 
				<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-using-gvardecls-with-keyword-arguments"/> 
				this time using 
				<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArguments</methodname> 
				.</para>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import DeclareArguments
decls = DeclareArguments(
foo = { &apos;env_key&apos;: &apos;ENV_FOO&apos;, &apos;var_key&apos; : &apos;var_foo&apos;, &apos;opt_key&apos; : &apos;opt_foo&apos;,
        &apos;option&apos; : &apos;--foo&apos;, &apos;default&apos; : &apos;Default FOO&apos;,
        &apos;help&apos; : &apos;foo help&apos; },
bar = { &apos;env_key&apos;: &apos;ENV_BAR&apos;, &apos;var_key&apos; : &apos;var_bar&apos;, &apos;opt_key&apos; : &apos;opt_bar&apos;,
        &apos;option&apos; : &apos;--bar&apos;, &apos;default&apos; : &apos;Default VAR&apos;,  &apos;type&apos; : &apos;string&apos;,
        &apos;help&apos; : &apos;bar help&apos; }
)</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
			the above example we&apos;ve used keyword arguments, but all the 
			calling conventions of 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ArgumentDeclarations</methodname> 
			(that is passing list or dict, or mixing them with keyword 
			arguments) apply also to 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">DeclareArguments</methodname> 
			.</para>
		</section>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Default 
			values and substitutions</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				When declaring a Argument one may define default values for the 
				associated construction variable, command line variable and command 
				line option. One feature of Arguments is that they support 
				substitutions similarly as the construction variables do. Taking 
				construction variables as an example, if you have two construction 
				variables 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname>
				 and 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bar</varname>
				 and you write
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"># SConstruct
env = Environment()
env[&apos;foo&apos;] = &quot;foo married $bar&quot;
env[&apos;bar&apos;] = &quot;BAR&quot;
print env.subst(&quot;foo: $foo&quot;)
print env.subst(&quot;bar: $bar&quot;)</programlisting>
				then you should expect at output
				<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$ scons -Q
foo: foo married BAR
bar: BAR
scons: `.&apos; is up to date.</screen>
			</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Substitutions 
			may also be used in default values of command line variables and 
			comand line options.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Substitutions 
				in default values</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					Let&apos;s say, you have defined Arguments 
					<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname>
					 and 
					<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bar</varname>
					 as follows:
					<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import ArgumentDeclarations
decls = ArgumentDeclarations(
foo = ( { &apos;ENV_FOO&apos; : None }, (&apos;VAR_FOO&apos;, &apos;Help for VAR_FOO&apos;, &apos;$VAR_BAR&apos;), None),
bar = ( { &apos;ENV_BAR&apos; : None }, (&apos;VAR_BAR&apos;, &apos;Help for VAR_BAR&apos;, &apos;BAR&apos;), None),
)</programlisting>
					then after commiting 
					<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">decls</varname>
					 and updating the scons environment 
					<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</varname>
					 you should expect the following construction variables in 
					environment
					<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env[&apos;ENV_FOO&apos;] == &apos;${ENV_BAR}&apos; # True
env[&apos;ENV_BAR&apos;] == &apos;BAR&apos;        # True</programlisting>
				</para>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
			substitution machinery leaves the core job to SCons Environment. 
			What Arguments do by their own is to just catch and forward 
			appropriatelly to the scons environment the variable substitutions 
			found in command line variables or options. In the above example the 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">VAR_FOO=&apos;$VAR_BAR&apos;</code> 
			contains a substitution of existing command line variable 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">VAR_BAR</varname> 
			, so the substitution 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;$VAR_BAR&apos;</code> 
			in default value of 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">VAR_FOO</varname> 
			will be forwarded to environment as 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;${ENV_BAR}&apos;</code> 
			.</para>
		</section>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-committing-args">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Committing 
		Argument Declarations</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Once 
		created, Argument Declarations shall be committed with 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclarations.Commit()</code> 
		method. By committing declarations you create their associatted 
		commandline options and variables, construction variables, fill them 
		with default values and &quot;freeze&quot; the declarations such that 
		it&apos;s guaranteed that they will not change. The 
		<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Commit</methodname> 
		method optionally spawns the actual Arguments (to this end we talked 
		about variable &quot;declarations&quot;, not the variables) which may 
		be used to pass values between commandline options/variables and 
		scons environment. The result of commit is a new collection of 
		Arguments - an object of type 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		. Once 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		are created, the 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_ArgumentDeclarations</classname> 
		are no longer needed.</para>
		<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Committing 
			Argument Declarations</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				Having a collection 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">decls</varname>
				 of Argument Declarations, we may commit them as follows
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args = decls.Commit(env,vars)</programlisting>
				where 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</varname>
				 is an instance of 
				<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="www.scons.org/doc/latest/HTML/scons-api/SCons.Environment.Base-class.html">SCons 
				Environment</link>
				 object and 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">vars</parameter>
				 is an instance of 
				<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
				Variables</link>
				 . The 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</parameter>
				 and 
				<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">vars</parameter>
				 parameters, if given, will be populated with default values of 
				construction variables and command line variables provided with 
				<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">decls</varname>
				 .
			</para>
		</example>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		prototype of the 
		<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Commit</methodname> 
		method is</para>
		<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments|None Commit(self, env=None, variables=None, create_options=False, create_args=True, *args)</programlisting>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Parameters 
		are summarized in the following table</para>
		<informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<th xmlns="http://docbook.org/ns/docbook">parameter</th>
					<th xmlns="http://docbook.org/ns/docbook">description</th>
				</tr>
			</thead>
			<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">A 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="www.scons.org/doc/latest/HTML/scons-api/SCons.Environment.Base-class.html">SCons 
					Environment</link> object to be populated with default values of 
					Arguments.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">variables</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">A 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
					Variables</link> object to be populated with new variables defined 
					by Arguments.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">create_options</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">If 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">True</literal>, 
					the command-line options declared by Arguments are created.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">create_args</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">If 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">True</literal> 
					(default) create and return a 
					<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
					object for further operation on variables and their values. If 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">False</literal> 
					, 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</literal> 
					is returned.</td>
				</tr>
			</tbody>
		</informaltable>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		method returns a new 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		object if 
		<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args</parameter> 
		parameter was 
		<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">True</literal> 
		(default). Otherwise it returns 
		<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</literal> 
		.</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
		you decide to not spawn 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		when Committing, the committed declarations may always be converted 
		to 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		at a later stage:</para>
		<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">import SConsArguments
args = SConsArguments._Arguments(decls)</programlisting>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="sec-postprocessing-args">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Postprocessing 
		Arguments</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		final step of the three-step procedure outlined at the end of 
		<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="sec-args-basics"/> 
		is to postprocess Arguments to incorporate values from CLI variables, 
		options and OS environment into SCons environment. This is achieved 
		with the 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments.Postprocess</code> 
		method. Let 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args</varname> 
		be an instance of 
		<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
		, 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</varname> 
		be an instance of 
		<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="www.scons.org/doc/latest/HTML/scons-api/SCons.Environment.Base-class.html">SCons 
		Environment</link> , and 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">variables</varname> 
		be an instance of 
		<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
		Variables</link> . We may pump values from command line variables and 
		options to their associated construction variables in 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</varname> 
		as follows</para>
		<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args.Postprocess(env, variables, True)</programlisting>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		prototype of 
		<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Postprocess</methodname> 
		is the following</para>
		<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Postprocess(self, env, variables=None, use_options=False, ose={}, args=None, filename=None)</programlisting>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		parameters are summarized in the following table</para>
		<informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<th xmlns="http://docbook.org/ns/docbook">parameter</th>
					<th xmlns="http://docbook.org/ns/docbook">description</th>
				</tr>
			</thead>
			<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">A 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="www.scons.org/doc/latest/HTML/scons-api/SCons.Environment.Base-class.html">SCons 
					Environment</link> object to be updated.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">variables</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">A 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
					Variables</link> object with 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-variables">SCons 
					variables</link> to retrieve values from. If 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</literal>, 
					then 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/latest/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
					Variables</link> are not taken into account.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">use_options</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">If 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">True</literal> 
					, 
					<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="http://www.scons.org/doc/HTML/scons-user.html#sect-command-line-options">command-line 
					options</link> are taken into account when updating 
					<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env</parameter> 
					. If False, the command-line options are not taken into 
					account.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ose</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">Third source of data, 
					usually taken from 
					<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">os.environ</code> 
					.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">Passed verbatim to an 
					internal method 
					<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">update_env_from_vars()</code> 
					. See API documentation for details.</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">filename</parameter></td>
					<td xmlns="http://docbook.org/ns/docbook">Name of the file to save 
					current values of variables. By default ( 
					<literal xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">None</literal>) 
					variables are not saved.</td>
				</tr>
			</tbody>
		</informaltable>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Accessing 
		Argument values</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Values 
		assigned to Arguments get stored in their associated variables in a 
		SCons environment. For example, a value of Argument 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
		may be stored in a construction variable 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_foo</varname> 
		. The name of the associatted construction variable ( 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_foo</varname> 
		) may be other than the name of its Argument and the mapping from 
		Arguments to SCon environment does not have to be obvious or regular. 
		If we have a number of such variables and we keep track of Argument 
		Names only, then accessing their values directly in SCons environment 
		may be cumbersome.</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">We 
		may use 
		<emphasis xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">proxy</emphasis> 
		to access Argument Values using their original names. A proxy object 
		is a thin wrapper around SCons environment which internally 
		transforms Argument Names to the names of their associated 
		construction variables. In the previous example you would query such 
		a proxy for the value of 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
		and it would return the value of construction variable 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_foo</varname> 
		.</para>
		<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Accessing 
			Argument Values via proxy</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
			this example, we create a Argument named 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
			which associates command line variable 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
			and construction variable 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">env_foo</varname> 
			. We then create a proxy object to access the value of variable 
			using its original name 
			<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</varname> 
			.</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">from SConsArguments import DeclareArguments

env = Environment()
var = Variables()

decls = DeclareArguments( foo = { &apos;env_key&apos; : &apos;env_foo&apos;, &apos;var_key&apos; : &apos;foo&apos; } )
args = decls.Commit(env, var)
args.Postprocess(env, var)

# create proxy object
proxy = args.EnvProxy(env)
# access variable via proxy
print &quot;foo: %s&quot; % proxy[&apos;foo&apos;]
</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				The above script may be tested as follows
				<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt><command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command><option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option> foo=&quot;it&apos;s a foo&quot;
foo: it&apos;s a foo
scons: `.&apos; is up to date.</screen>
			</para>
		</example>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			The proxy object provides dict-like access to Arguments as well as 
			substitutions. In the above example, you may freely replace the line
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">print &quot;foo: %s&quot; % proxy[&apos;foo&apos;]</programlisting>
			with
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">print proxy.subst(&quot;foo: $foo&quot;)</programlisting>
		</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Note, 
		that the proxy object does not wrap all the functionality of the 
		environment, so most functions are not available. It just wraps dict 
		access and the 
		<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">subst</methodname> 
		method. So other methods, including builders, pseudobuilders etc. are 
		not available via proxy.</para>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Putting 
		it all together</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			In this section we&apos;ll walk through a complete example. 
			We&apos;ll define three Arguments:
			<itemizedlist xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">prefix</varname> 
					- installation prefix,</para>
				</listitem>
				<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">exec_prefix</varname> 
					- installation prefix for executable files,</para>
				</listitem>
				<listitem xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bindir</varname> 
					- directory for installing executable programs that users can 
					run.</para>
				</listitem>
			</itemizedlist>
		</para>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">To 
		make our live a little bit more complicated, we&apos;ll associate the 
		following construction variables (ENV), command line variables (VAR) 
		and command line options (OPT) with our Arguments</para>
		<informaltable xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<thead xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<th xmlns="http://docbook.org/ns/docbook">Argument Name</th>
					<th xmlns="http://docbook.org/ns/docbook">Default Value</th>
					<th xmlns="http://docbook.org/ns/docbook">ENV</th>
					<th xmlns="http://docbook.org/ns/docbook">VAR</th>
					<th xmlns="http://docbook.org/ns/docbook">OPT/OPT KEY</th>
				</tr>
			</thead>
			<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">prefix</varname></td>
					<td xmlns="http://docbook.org/ns/docbook"><code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;/usr/local&apos;</code></td>
					<td xmlns="http://docbook.org/ns/docbook">GNU_PREFIX</td>
					<td xmlns="http://docbook.org/ns/docbook">PREFIX</td>
					<td xmlns="http://docbook.org/ns/docbook">--prefix/opt_prefix</td>
				</tr>
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">exec_prefix</varname></td>
					<td xmlns="http://docbook.org/ns/docbook"><code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;$prefix&apos;</code></td>
					<td xmlns="http://docbook.org/ns/docbook">GNU_EXEC_PREFIX</td>
					<td xmlns="http://docbook.org/ns/docbook">EXEC_PREFIX</td>
					<td xmlns="http://docbook.org/ns/docbook">--exec-prefix/opt_exec_prefix</td>
				</tr>
			</tbody>
			<tbody xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<tr xmlns="http://docbook.org/ns/docbook">
					<td xmlns="http://docbook.org/ns/docbook"><varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bindir</varname></td>
					<td xmlns="http://docbook.org/ns/docbook"><code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&apos;$exec_prefix/bin&apos;</code></td>
					<td xmlns="http://docbook.org/ns/docbook">GNU_BINDIR</td>
					<td xmlns="http://docbook.org/ns/docbook">BINDIR</td>
					<td xmlns="http://docbook.org/ns/docbook">--bindir/opt_bindir</td>
				</tr>
			</tbody>
		</informaltable>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">The 
		complete code of a SConstruct file using these variables is shown in 
		the following example</para>
		<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="example-args-complete">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Complete 
			example involving Arguments</title>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"># SConstruct
import SConsArguments
decls = SConsArguments.DeclareArguments(
prefix      = { &apos;env_key&apos; : &apos;GNU_PREFIX&apos;, &apos;var_key&apos; : &apos;PREFIX&apos;, &apos;opt_key&apos; : &apos;opt_prefix&apos;,
                &apos;option&apos; : &apos;--prefix&apos;, &apos;default&apos; : &apos;/usr/local&apos;, &apos;type&apos; : &apos;string&apos;,
                &apos;help&apos; : &apos;installation prefix&apos; },
exec_prefix = { &apos;env_key&apos; : &apos;GNU_EXEC_PREFIX&apos;, &apos;var_key&apos; : &apos;EXEC_PREFIX&apos;, &apos;opt_key&apos; : &apos;opt_exec_prefix&apos;,
                &apos;option&apos; : &apos;--exec-prefix&apos;, &apos;default&apos; : &apos;$prefix&apos;, &apos;type&apos; : &apos;string&apos;,
                &apos;help&apos; : &apos;installation prefix for executable files&apos; },
bindir      = { &apos;env_key&apos; : &apos;GNU_BINDIR&apos;, &apos;var_key&apos; : &apos;BINDIR&apos;, &apos;opt_key&apos; : &apos;opt_bindir&apos;,
                &apos;option&apos; : &apos;--bindir&apos;, &apos;default&apos; : &apos;$exec_prefix/bin&apos;, &apos;type&apos; : &apos;string&apos;,
                &apos;help&apos; : &apos;directory for installing executable programs that users can run&apos; }
)
env = Environment()
var = Variables()
args = decls.Commit(env, var, True)
args.Postprocess(env, var, True)

AddOption( &apos;--help-variables&apos;, dest=&apos;help_variables&apos;, action=&apos;store_true&apos;,
         help=&apos;print help for CLI variables&apos; )
if GetOption(&apos;help_variables&apos;):
  print args.GenerateVariablesHelpText(var, env)
  Exit(0)

# Create proxy to access Arguments using their original names
proxy = args.EnvProxy(env)

# Print values.
print proxy.subst(&apos;prefix: $prefix&apos;)
print proxy.subst(&apos;exec_prefix: $exec_prefix&apos;)
print proxy.subst(&apos;bindir: $bindir&apos;)
</programlisting>
		</example>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Let&apos;s 
		play a while with the 
		<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-args-complete"/> 
		. First we&apos;ll check the default values</para>
		<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option>
prefix: /usr/local
exec_prefix: /usr/local
bindir: /usr/local/bin
scons: `.&apos; is up to date.
</screen>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Now, 
		set custom 
		<varname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">exec_prefix</varname> 
		via comman line variable:</para>
		<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option> EXEC_PREFIX=&apos;$PREFIX/exec&apos;
prefix: /usr/local
exec_prefix: /usr/local/exec
bindir: /usr/local/exec/bin
scons: `.&apos; is up to date.
</screen>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">And 
		same thing with command line option:</para>
		<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--exec-prefix</option>=&apos;$opt_prefix/exec&apos;
prefix: /usr/local
exec_prefix: /usr/local/exec
bindir: /usr/local/exec/bin
scons: `.&apos; is up to date.
</screen>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
		we specify both, the command line variable and the command line 
		option, the option takes precedence</para>
		<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--exec-prefix</option>=&apos;$opt_prefix/exec_o&apos; EXEC_PREFIX=&apos;$PREFIX/exec_v&apos;
prefix: /usr/local
exec_prefix: /usr/local/exec_o
bindir: /usr/local/exec_o/bin
scons: `.&apos; is up to date.
</screen>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Help 
		strings for options are added automatically, we may see them under 
		<emphasis xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Local 
		Options</emphasis> section when running 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons 
		-h</code> .</para>
		<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt><command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> -h
usage: scons [OPTION] [TARGET] ...

SCons Options:
 &lt;.... lot of options here ...&gt;
Local Options:
--exec-prefix=OPT_EXEC_PREFIX
                            installation prefix for executable files
--prefix=OPT_PREFIX         installation prefix
--bindir=OPT_BINDIR         directory for installing executable programs
                              that users can run
</screen>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Documenting 
			Command Line variables</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Command 
			line variables, as opposed to command line options, have no help 
			strings generated by default. To generate help for command line 
			variables, one may invoke 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">GenerateVariablesHelpText</methodname> 
			method on 
			<classname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">_Arguments</classname> 
			variables:</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Help( args.GenerageVariablesHelpText(var, env) )</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Note, 
			that the above declaration shadows local options (our 
			<option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--prefix</option> 
			for example), such that they&apos;re not available anymore at help 
			screen. To circumvent this problem, we may dedicate separate option 
			to print help for command line variables.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Documenting 
				command line variables</title>
				<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">AddOption( &apos;--help-variables&apos;, dest=&apos;help_variables&apos;, action=&apos;store_true&apos;,
         help=&apos;print help for CLI variables&apos; )
if GetOption(&apos;help_variables&apos;):
  print args.GenerateVariablesHelpText(var, env)
  Exit(0)</programlisting>
			</example>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
			we integrate this snippet into SConscript from 
			<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-args-complete"/> 
			, then running 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons 
			--help-variables</code> yields</para>
			<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">-Q</option> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--help-variables</option>

EXEC_PREFIX: installation prefix for executable files
  default: ${PREFIX}
  actual: /usr/local

PREFIX: installation prefix
  default: /usr/local
  actual: /usr/local

BINDIR: directory for installing executable programs that users can run
  default: ${EXEC_PREFIX}/bin
  actual: /usr/local/bin
</screen>
		</section>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Saving 
			command line variables to a file</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Easies 
			way to save Arguments is to pass 
			<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">filename</parameter> 
			parameter to the 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Postprocess()</methodname> 
			method.</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args.Postprocess(env, var, True, os.environ, filename=&apos;.scons.variables&apos;)</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">If 
			you need, however, to save also the changes taken from os.environ, 
			you must save the variables after postprocessing. You may use 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">SaveVariables</methodname> 
			method to accomplish that.</para>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Command 
			line variables associatted with our Arguments may be saved to a file 
			with 
			<methodname xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">SaveVariables</methodname> 
			method.</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args.SaveVariables(var, &quot;.scons.variables&quot;, env)</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Note, 
			that this saves only values changed via command line (defaults are 
			not saved). This takes into account input from a command line 
			variable and a command line option associated with a given Argument. 
			In any case, however, the value is saved as it was set to a command 
			line variable.</para>
			<example xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
				<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Saving 
				Arguments to file</title>
				<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
					If you integrate the following code snippet to the SConscript file 
					from 
					<xref xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" linkend="example-args-complete"/>
					 ,
					<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">args.SaveVariables(var, &apos;.scons.variables&apos;, env)</programlisting>
					then we have the following behavior
				</para>
				<screen xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"><prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">scons</command> <option xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">--prefix</option>=/opt EXEC_PREFIX=&apos;${PREFIX}/exec&apos;

<prompt xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">ptomulik@tea:$</prompt> <command xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">cat</command> .scons.variables
EXEC_PREFIX = &apos;${PREFIX}/exec&apos;
PREFIX = &apos;/opt&apos;
</screen>
			</example>
		</section>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Loading 
			command line variables from file</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">This 
			is done in standard way, that is by using the feature of 
			<link xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink" xlink:href="www.scons.org/doc/HTML/scons-api/SCons.Variables.Variables-class.html">SCons 
			Variables</link> . The only thing that has to be done is to provide 
			<parameter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">file</parameter> 
			parameter when creating command line variables</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">var = Variables(&apos;.scons.variables&apos;)
</programlisting>
		</section>
	</section>
	<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
		<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Importing 
		argument declarations from python modules</title>
		<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Argument 
		declarations may be delivered by python modules in a similar way as 
		SCons tools are. A python module placed in an appropriate directory 
		may be used for this purpose. The default search path for arguments 
		modules is derived from default tool search path. If, for example, 
		default tool search path contains 
		<filename xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">~/.scons/site_scons/site_tools</filename>, 
		then the corresponding directory for argument modules will be 
		<filename xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">~/.scons/site_scons/site_arguments</filename>. 
		The rule is, that we simply replace 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&quot;site_tools&quot;</code> 
		in the last component of directory name with 
		<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">&quot;site_arguments&quot;</code>. 
		The argument modules may also be placed in the 
		<package xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">SConsArguments</package> 
		package.</para>
		<section xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
			<title xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">Preparing 
			module with argument declarations</title>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">An 
			argument module should provide a function named 
			<function xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">arguments</function> 
			defined as follows</para>
			<programlisting xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">def arguments(**kw):
    return { &apos;foo&apos; : { ... }, &apos;bar&apos; : { ... } }</programlisting>
			<para xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">In 
			the above code snippet, 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">foo</code> 
			and 
			<code xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">bar</code> 
			are argument names, and these keys are followed by argument 
			declarations. Each declaration should have a form of dict with same 
			keys as arguments to DeclareArguments 
			(<xref linkend="sec-declaring-single-arg"/>). Such a file should be 
			placed somewhere within search path for argument modules, for 
			example under <filename>site_scons/site_arguments</filename>. A 
			simple module with two argument declarations is given in the 
			following example</para>
			<example>
				<title>A simple module with arguments</title>
				<programlisting># site_scons/site_arguments/myargs.py
def arguments(**kw):
    return {
      &apos;arg1&apos; : { &apos;help&apos; : &apos;This is argument 1&apos; },
      &apos;arg2&apos; : { &apos;help&apos; : &apos;This is argument 2&apos; }
    }</programlisting>
			</example>
		</section>
		<section>
			<title>Importing argument declarations from a module</title>
			<para>Argument declarations can be imported from a module with the 
			<function>ImportArguments</function> function.</para>
			<programlisting>import SConsArguments
decl = SConsArguments.ImportArguments(&apos;myargs&apos;)</programlisting>
			<para>Having these declarations, we proceed as described in the 
			previous sections (committing, postprocessing, etc.).</para>
			<para>The prototype of <function>ImportArguments</function> is the 
			following</para>
			<programlisting>ImportArguments(modules, argpath=None, kwpass=None, **kw)</programlisting>
			<para>The function accepts quite a lot of optional parameters (we 
			refer an interested user to API reference). Here we only mention few 
			of the most important.</para>
			<informaltable>
				<thead>
					<tr>
						<th>parameter</th>
						<th>description</th>
					</tr>
				</thead>
				<tbody>
					<tr>
						<td><parameter>modules</parameter></td>
						<td>modules to be imported (their names); may be a single string 
						or a collection (list) of strings.</td>
					</tr>
					<tr>
						<td><parameter>argpath</parameter></td>
						<td>a list of directories to be searched for arguments&apos; 
						modules prior to default search path</td>
					</tr>
					<tr>
						<td><parameter>kwpass</parameter></td>
						<td>an optional hash with keyword arguments passed to the 
						imported modules (to their <function>arguments()</function> 
						functions); if, for example, we call 
						<code>ImportArguments([&apos;mod1&apos;, &apos;mod2&apos;], None, 
						{&apos;foo&apos; : &apos;FOO&apos;})</code>, then these function 
						will be invoked as <code>mod1.arguments(foo = 
						&apos;FOO&apos;)</code> and 
						<code>mod2.arguments(foo=&apos;FOO&apos;)</code>.</td>
					</tr>
					<tr>
						<td><parameter>name_filter</parameter></td>
						<td>a callable object used to filter-out unwanted arguments 
						defined in the arguments based on their names; if 
						<parameter>name_filter</parameter> is a list or set (a 
						collection), only arguments listed in this collection will be 
						imported.</td>
					</tr>
					<tr/>
				</tbody>
			</informaltable>
		</section>
	</section>
	<!--
		We stick to xi:include, as SCons dependency scanner recognizes them 
		automatically
	-->
</article>
